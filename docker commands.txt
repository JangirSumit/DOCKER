1. Cannot connect to the Docker daemon at unix:/var/run/docker.sock. Is the docker daemon running?
Start Docker Service
Ans: sudo service docker start

2. Docker Check Images
Ans: sudo docker Images

3. Docker find process (Only running process/container)
Ans: sudo docker ps 

4. Docker find process (All running process/container+idol)
Ans: sudo docker ps -a

5. Find and install Images
Ans: sudo docker run <image_name>

6. Get image
Ans: sudo docker pull <image_name>

7. History of an image
Ans: sudo docker history <image_name>

8. Get detailed information of an image
Ans: sudo docker inspect <image_name>

9. Remove Image from local
Ans: sudo docker rmi <image_name>

10. Remove unused Images
Ans: sudo docker image prune

11. Remove unused(stopped/exited) Containers
Ans: sudo docker container prune

12. Stop/Start/Restart/Inspect Containers
Ans: sudo docker [stop/start/restart/inspnect] <container_id>

13. Remove Containers (-f: forcefully  though it is inrunning state)
Ans: sudo docker rm [-f] <container_id>

14. Creates new container & gets inside the container (in interactive mode)
Ans: sudo docker run -it node

15. Creates a new container in detached mode
Ans: sudo docker run -d node

16. Get Inside of a container
Ans: sudo docker exec -it <container id> bash 

17. Running a container in the foreground mode attaches the terminal to the containerâ€™s
STDIN/STDOUT/STDERR
The -a flag can be passed to specify the stream (by default without any flags containers always
start in attached mode)
Ans: docker run -a <stream> <imageName>

18. Public ip address
Ans: curl ifconfig.co

19. Default directory path for docker
Ans: sudo cd /var/li/docker

20. Where Docker images gets stored
Ans: overlay2 folder

21. Check All layers?
Ans: move to overlay2 folder and do sudo ls -lart

22. Check Images and Layers?
Ans: in imagesdb and layersdb

23. Thin Writable Layer?
Ans: Because of this layer we can edit something inside a running container. Same is not available in Image.

24. Create Image?
Ans: 1. Manual or commit / import-export
2. Automatic or dockerfile

25. Convert a running contianer into an image
Ans: sudo ocker commit -m "install nginx" -c 'CMD /usr/sbin/nginx -g "daemon off;"' -c 'EXPOSE 80' <contid> <new image name>

26. login into docker hub
Ans: sudo docker login

27. Dcoker file?
Ans. without any extension. eg: dockerfile
We can create it with command :- vi dockerfile

28. create Docker file
Ans:
vi dockerfile (will move into vi editor)
[PRESS i to get into editor for insert]

Add below directives
---------------------
FROM ubuntu
RUN apt-get update
RUN apt-get install -y vim
RUN apt-get install -y nginx
RUN rm /var/www/html/*
WORKDIR /var/www/html/
RUN echo "<h1>Hello from Sumit</h1>"
EXPOSE 80
CMD /usr/sbin/nginx -g "daemon off;"
-------------------------
[PRESS Esc and :wq then Enter to save and exit from vi editor]

29. create image from docker file
Ans: sudo docker build -t Sumit .
sudo docker build -t sumit -f dockerfile1 . (if filer name is apart from dockerfile)

NOTE: Docker build command i handled by Daemon not by CLI.

30. Port forwarding?
Ans: sudo docker run -itd -p 80:80 sumit:latest

Default port: sudo docker run -itd -P sumit:latest

31.Change Tag name of local image?
Ans: sudo docker tag micro-frontend:latest jangirsumit/first-image:micro-frontend

32. Push changes to docker hub
Ans: sudo dokcer push jangirsumit/first-image:micro-frontend

33. Move folder files to other folder
Ans: mv /path/sourcefolder/* /path/destinationfolder/

34. what is .dockerignore file?
Ans: Docker CLI refers to this file before it sends the context to the docker daemon. 
This file defines all the files and directories to exclude from the build.
Comments can be added in .dockerignore file with # symbol.
! mark can be used to exclude files and directories

35. Difference b/w CMD and ENTRYPOINT?
Ans: 
1. CMD - It de the default command to execute inside the container.
ENTRYPOINT - It allows user to define how the container will run as an executable.

2. CMD - This command can be easily overridden at runtime.
ENTRYPOINT - This command cannot be overridden unless the --entrypoint flag is added

3. CMD - If multiple CMD's are given inside a DockerFile, only last one will be executed
ENTRYPOINT - If CMD is added after the entrypoint, both will execute in order.

4. CMD -  Examples :- CMD echo "Docker CMD"
ENTRYPOINT - Examples :- ENTRYPOINT ["echo", "DCA"]

36. Multi Stage builds?
Ans: It allows us to create a final image using lesser number of layers which in turn reduces the final images size.

37. Docker Images?
Ans: Docker image is a file, consisting of multiple layers, that is executed to create a container.
Container use images to construct a run-time environment.

38. DockerFile Directives?
Ans: 
FROM - 
RUN - used to run commands like rm, mv
EXPOSE - expose ports to external world
CMD - used to execute commands, can be overridden, can have multiple but only one will execute that will be last one only
WORKDIR - set current working directory
COPY
ADD 
STOPSIGNAL - default SIGTERM
HEALTHCHECK OK - Easiest way to check health of a contianer

39. Example with HEALTHCHECK?
Ans:
create docker file-
vi dockerfile

in docker file-
FROM ubuntu
RUN apt-get update
RUN apt-get install -y nginx
RUN apt-get install -y curl
WORKDIR /var/www/html
EXPOSE 80
CMD ["nginx", "-g", "daemon off;"]
STOPSIGNAL SIGTERM
HEALTHCHECK CMD curl localhost:80

then create image of it-
sudo docker build -t healthcheck-demo 

create container of that image-
docker run -id -p 86:80 healthcheck-demo

40. How to see health status?
Ans: docker ps
You will see status option from result set

41. Example of multi stage builds and normal builds?
Ans:

cd ~/
mkdir efficient
mkdir inefficient
cd inefficient
Create the source code file:

vi helloworld.go
package main
import "fmt"
func main() {
    fmt.Println("hello world")
}
Create the Dockerfile:

vi Dockerfile
FROM golang:1.12.4
WORKDIR /helloworld
COPY helloworld.go .
RUN GOOS=linux go build -a -installsuffix cgo -o helloworld .
CMD ["./helloworld"]


Build and test the inefficient image:

docker build -t inefficient .
docker run inefficient
docker image ls
Switch to the efficient project directory and copy the files from the inefficient project:

cd ~/efficient
cp ../inefficient/helloworld.go ./
cp ../inefficient/Dockerfile ./
Change the Dockerfile to use a multi-stage build:

vi Dockerfile
FROM golang:1.12.4 AS compiler
WORKDIR /helloworld
COPY helloworld.go .
RUN GOOS=linux go build -a -installsuffix cgo -o helloworld .

FROM alpine:3.9.3
WORKDIR /root
COPY --from=compiler /helloworld/helloworld .
CMD ["./helloworld"]
Build and test the efficient image:

docker build -t efficient .
docker run efficient
docker image ls

42. Remove unnecessary sapce (contianer + image)
Ans: docker system prune
Note: it will remove all stopped containers, dangling images, volumes not used by any container, networks not used by any container

43. Check volumes created
Ans: docker volume ls

Note: It will only tells the volumes created at the default location. 
"Mountpoint": "/var/lib/docker/volumes/vol1/_data"

44. create volume
Ans: docker volume create vol1

45. Know about volume?
Ans: docker inspect vol1

46. Assign volume to a container
Ans: use -v option

docker run -d -p 89:80 -v vol1:/app tomcat
here, data of /app folder will be map to volume vol1 of container tomcat

47. Create volumes in second way-
Ans: docker run -d -P -v vol2:/usr/local/tomcat/logs tomcat

Here, vol2 will be created and mapped to /usr/local/tomcat/logs of container tomcat

48. What is Bind Mounts?
Ans: Create your own directory structures for using volumes is known as Bind Mounts.

Eg:- docker run -d -P -v /tmp/prod:/usr/share/nginx/html nginx

49. Find volumes mounted to container?
Ans:
docker inspect container_id

 "Mounts": [
            {
                "Type": "bind",
                "Source": "/docs",
                "Destination": "/usr/share/nginx/html",
                "Mode": "",
                "RW": true,
                "Propagation": "rprivate"
            }
        ],

50. Volume mapping vs Bind Mounts?
Ans: Volume mapping : managed by docker and recommended.

51. Remove volume
Ans: docker volume rm <volume_name>

52. Flags used for volume mounting?
Ans: -v and --mount

53.


