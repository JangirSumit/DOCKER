1. Cannot connect to the Docker daemon at unix:/var/run/docker.sock. Is the docker daemon running?
Start Docker Service
Ans: sudo service docker start

2. Docker Check Images
Ans: sudo docker Images

3. Docker find process (Only running process/container)
Ans: sudo docker ps 

4. Docker find process (All running process/container+idol)
Ans: sudo docker ps -a

5. Find and install Images
Ans: sudo docker run <image_name>

6. Get image
Ans: sudo docker pull <image_name>

7. History of an image
Ans: sudo docker history <image_name>

8. Get detailed information of an image
Ans: sudo docker inspect <image_name>

9. Remove Image from local
Ans: sudo docker rmi <image_name>

10. Remove unused Images
Ans: sudo docker image prune

11. Remove unused(stopped/exited) Containers
Ans: sudo docker container prune

12. Stop/Start/Restart/Inspect Containers
Ans: sudo docker [stop/start/restart/inspnect] <container_id>

13. Remove Containers (-f: forcefully  though it is inrunning state)
Ans: sudo docker rm [-f] <container_id>

14. Creates new container & gets inside the container (in interactive mode)
Ans: sudo docker run -it node

15. Creates a new container in detached mode
Ans: sudo docker run -d node

16. Get Inside of a container
Ans: sudo docker exec -it <container id> bash 

17. Running a container in the foreground mode attaches the terminal to the containerâ€™s
STDIN/STDOUT/STDERR
The -a flag can be passed to specify the stream (by default without any flags containers always
start in attached mode)
Ans: docker run -a <stream> <imageName>

18. Public ip address
Ans: curl ifconfig.co

19. Default directory path for docker
Ans: sudo cd /var/li/docker

20. Where Docker images gets stored
Ans: overlay2 folder

21. Check All layers?
Ans: move to overlay2 folder and do sudo ls -lart

22. Check Images and Layers?
Ans: in imagesdb and layersdb

23. Thin Writable Layer?
Ans: Because of this layer we can edit something inside a running container. Same is not available in Image.

24. Create Image?
Ans: 1. Manual or commit / import-export
2. Automatic or dockerfile

25. Convert a running contianer into an image
Ans: sudo ocker commit -m "install nginx" -c 'CMD /usr/sbin/nginx -g "daemon off;"' -c 'EXPOSE 80' <contid> <new image name>

26. login into docker hub
Ans: sudo docker login

27. Dcoker file?
Ans. without any extension. eg: dockerfile
We can create it with command :- vi dockerfile

28. create Docker file
Ans:
vi dockerfile (will move into vi editor)
[PRESS i to get into editor for insert]

Add below directives
---------------------
FROM ubuntu
RUN apt-get update
RUN apt-get install -y vim
RUN apt-get install -y nginx
RUN rm /var/www/html/*
WORKDIR /var/www/html/
RUN echo "<h1>Hello from Sumit</h1>"
EXPOSE 80
CMD /usr/sbin/nginx -g "daemon off;"
-------------------------
[PRESS Esc and :wq! then Enter to save and exit from vi editor]

29. create image from docker file
Ans: sudo docker build -t Sumit .
sudo docker build -t sumit -f dockerfile1 . (if filer name is apart from dockerfile)

NOTE: Docker build command i handled by Daemon not by CLI.

30. Port forwarding?
Ans: sudo docker run -itd -p 80:80 sumit:latest

Default port: sudo docker run -itd -P sumit:latest

31.Change Tag name of local image?
Ans: sudo docker tag micro-frontend:latest jangirsumit/first-image:micro-frontend

32. Push changes to docker hub
Ans: sudo dokcer push jangirsumit/first-image:micro-frontend

33. Move folder files to other folder
Ans: mv /path/sourcefolder/* /path/destinationfolder/

34. what is .dockerignore file?
Ans: Docker CLI refers to this file before it sends the context to the docker daemon. 
This file defines all the files and directories to exclude from the build.
Comments can be added in .dockerignore file with # symbol.
! mark can be used to exclude files and directories

35. Difference b/w CMD and ENTRYPOINT?
Ans: 
1. CMD - It de the default command to execute inside the container.
ENTRYPOINT - It allows user to define how the container will run as an executable.

2. CMD - This command can be easily overridden at runtime.
ENTRYPOINT - This command cannot be overridden unless the --entrypoint flag is added

3. CMD - If multiple CMD's are given inside a DockerFile, only last one will be executed
ENTRYPOINT - If CMD is added after the entrypoint, both will execute in order.

4. CMD -  Examples :- CMD echo "Docker CMD"
ENTRYPOINT - Examples :- ENTRYPOINT ["echo", "DCA"]

36. Multi Stage builds?
Ans: It allows us to create a final image using lesser number of layers which in turn reduces the final images size.

37. Docker Images?
Ans: Docker image is a file, consisting of multiple layers, that is executed to create a container.
Container use images to construct a run-time environment.

38. DockerFile Directives?
Ans: 
FROM - 
RUN - used to run commands like rm, mv
EXPOSE - expose ports to external world
CMD - used to execute commands, can be overridden, can have multiple but only one will execute that will be last one only
WORKDIR - set current working directory
COPY
ADD 
STOPSIGNAL - default SIGTERM
HEALTHCHECK OK - Easiest way to check health of a contianer

39. Example with HEALTHCHECK?
Ans:
create docker file-
vi dockerfile

in docker file-
FROM ubuntu
RUN apt-get update
RUN apt-get install -y nginx
RUN apt-get install -y curl
WORKDIR /var/www/html
EXPOSE 80
CMD ["nginx", "-g", "daemon off;"]
STOPSIGNAL SIGTERM
HEALTHCHECK CMD curl localhost:80

then create image of it-
sudo docker build -t healthcheck-demo 

create container of that image-
docker run -id -p 86:80 healthcheck-demo

40. How to see health status?
Ans: docker ps
You will see status option from result set

41. Example of multi stage builds and normal builds?
Ans:

cd ~/
mkdir efficient
mkdir inefficient
cd inefficient
Create the source code file:

vi helloworld.go
package main
import "fmt"
func main() {
    fmt.Println("hello world")
}
Create the Dockerfile:

vi Dockerfile
FROM golang:1.12.4
WORKDIR /helloworld
COPY helloworld.go .
RUN GOOS=linux go build -a -installsuffix cgo -o helloworld .
CMD ["./helloworld"]


Build and test the inefficient image:

docker build -t inefficient .
docker run inefficient
docker image ls
Switch to the efficient project directory and copy the files from the inefficient project:

cd ~/efficient
cp ../inefficient/helloworld.go ./
cp ../inefficient/Dockerfile ./
Change the Dockerfile to use a multi-stage build:

vi Dockerfile
FROM golang:1.12.4 AS compiler
WORKDIR /helloworld
COPY helloworld.go .
RUN GOOS=linux go build -a -installsuffix cgo -o helloworld .

FROM alpine:3.9.3
WORKDIR /root
COPY --from=compiler /helloworld/helloworld .
CMD ["./helloworld"]
Build and test the efficient image:

docker build -t efficient .
docker run efficient
docker image ls

42. Remove unnecessary sapce (contianer + image)
Ans: docker system prune
Note: it will remove all stopped containers, dangling images, volumes not used by any container, networks not used by any container

43. Check volumes created
Ans: docker volume ls

Note: It will only tells the volumes created at the default location. 
"Mountpoint": "/var/lib/docker/volumes/vol1/_data"

44. create volume
Ans: docker volume create vol1

45. Know about volume?
Ans: docker inspect vol1

46. Assign volume to a container
Ans: use -v option

docker run -d -p 89:80 -v vol1:/app tomcat
here, data of /app folder will be map to volume vol1 of container tomcat

47. Create volumes in second way-
Ans: docker run -d -P -v vol2:/usr/local/tomcat/logs tomcat

Here, vol2 will be created and mapped to /usr/local/tomcat/logs of container tomcat

48. What is Bind Mounts?
Ans: Create your own directory structures for using volumes is known as Bind Mounts.

Eg:- docker run -d -P -v /tmp/prod:/usr/share/nginx/html nginx

49. Find volumes mounted to container?
Ans:
docker inspect container_id

 "Mounts": [
            {
                "Type": "bind",
                "Source": "/docs",
                "Destination": "/usr/share/nginx/html",
                "Mode": "",
                "RW": true,
                "Propagation": "rprivate"
            }
        ],

50. Volume mapping vs Bind Mounts?
Ans: Volume mapping : managed by docker and recommended.

51. Remove volume
Ans: docker volume rm <volume_name>

52. Flags used for volume mounting?
Ans: -v and --mount

- If File/directory does not exists -v flag will create it.
- If File/directory does not exisits --mount will throw error.

--mount: docker run -d -P --mount type=bind, source=<source_path>, dst=<dst_path> <image_name>
-v: docker run -d -P -v source_path:dst_path <image_name>

53. tmpfs Mount?
Ans: Using containers on a Linux systems enable users to use tmpfs mount.
it enables container to write outside the container's writable layer.
These are temporary mounts and only persist inside host machines system memonry.

These are non sharable between containers
These mounts are not suitable to store permanent data.

54. tmfs flag examples?
Ans: 
-docker run -d --mount type=tmpfs, dst=<cont_path> <img_name>
-docker run -d --tmpfs <cont_name> <img_name>

55. Use of Bind Mounts?
Ans:
- When files from the host machines are needed inside the container. Example - config files
- Shared use of source code
- Useful if the host system has a consistent directory structure.

56. Use of tbpfs Mounts?
Ans: 
- Useful to store temporary security configuration files
- To store data which needs not to persist on either the host system or the container

57. Docker Compose?
Ans:
- Docker compose is a Docker tool for running multi-container applications
- It uses a yaml format compose file to configure the applications services.

- installation

sudo curl -L "https://github.com/docker/compose/releases/download/1.28.4/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
sudo chmod +x /usr/local/bin/docker-compose
docker-compose --version

58. docker-compose.yml example -

version: "3"
services:
  webserver:
    image: nginx
    ports:
      - "80"
    restart: always
    network_mode: bridge
    volumes:
      - /home/docker/:/usr/share/nginx/html
  appserver:
    image: tomcat
    ports:
      - "8080"
    network_mode: bridge
    restart: always


-----------

First 2 lines are headers

59. create containers from docker-compose?
Ans:
docker-compose -f docker-compose.yml up -d 

60. Stop containers created by docker compose?
Ans:
docker-compose -f docker-compose.yml down

61. Scale up/down containers with docker-compose
Ans:
docker-compose -f docker-compose.yml up --scale webserver=2 --scale appserver=3

62. Which flag is used to wait untill first image is loaded?
Ans: depends_on

63. Biggest drwaback of docker-compose?
Ans: Everything is on same machine. It might go down.

64. Container Orchestration?
Ans: Deploy containers as a clusters
cluster - grouping of servers

High availablity
Load Balancing
Auto Scaling

100% availablity


65. Minimum machines required to have clusters?
[n+1/2] == 3

66. Different types of containerizations?
Ans:
- docker run - 1 container 1 machine
- docker-compose - n containers 1 machine
- docker swarm - 1 cotainer n machines

67. How to create cluster?
Ans:
docker swarm init 

Then, copy given token commands in rest of all systems to join as sawrm worker.

68. From where to control the cluster nodes?
Ans: Manager/Leader system.

69. Create cluster of containers?
Ans:
docker service create --name sv1 --replicas 8 -p 4321:80 nginx

70. Check Docker replicas?
Ans:
on master: docker service ls
Get list of nodes/replicas: docker service ps svc1

71. Scale up/down containers on clusters?
Ans:
docker service scale svc1=10

72. What is Service level port?
Ans: Docker swarm create clusters of containers which are on same port.
It happens becuase of service. Service is responsible for handling requesting and redircting the request to exact container.

73. If we stop or remove any of the container of a cluster, What will happen?
Ans: Service will create another system.

74. If We stop any of the system?
Ans: Docker service will create replicas on available machines to match the replica numbers?

75. Command used to create only 1 container on all systems?
Ans:
docker service create --name lb --mode global tomcat


76. Remove any service?
Ans:
docker service rm <service_name>

77. Leave a cluster?
Ans:
docker swarm Leave

78. Generate swarm token again to create new worker?
Ans: 
docker swarm join-token worker

79. Get node details?
AnsL
docker node ls

80. Command to create replicas of cluster but no node should work in my leader/master?
Ans: 
docker service create --name sumit --replicas 4 --constraints node.role==worker nginx

81. Scaling a service?
Ans:
-docker service update --replicas 4 <serviceName>
or
docker service scale <serviceName>=5

82. Labelling a node?
Ans:
docker node update --label-add app=abc <node_id>

Note: you can add multiple labels

83. Add a constraint (define condition like add replicas should be on perticular machine/node)?
Ans:
docker service create --name syed --replicas 3 --constraint node.labels.app==abc tomcat

84. Rollup/Rollback?
Ans: Example, Updating versions of an application without impacting exisint service.

- docker service update --image <image_name> <service_name>
- docker service update --image <image_name> <service_name>

85. Till how many level we can rollback?
Ans: 18 rollbacks

86. Availablity drain??
Ans: Can use this command for maintenance state. 
After drain all resources will be moved to other nodes.

Eg:

docker node update --availablity drain <node_id>

87. Make active node again??
Ans: 
docker node update --availablity active <node_id>

88. Generate token for Manager??
Ans: It will help us to make back up managers
docker swarm join-token Manager

89. How to make a node as a manager?
Ans:
First leave as a worker if available -

docker warm leave

Join as a manager-
docker swam join........ <full command returned after generating command for manager>

90. docker Stack?
Ans: Multi container - multiple replica

91. Deploy multi container app
Ans:
- docker stack deploy -c app.yml <name_of_stack>

92. Check list of stacks?
Ans:
- docker stack ls

93. Check applicaion created into stack?
Ans:
- docker stack services <name_of_stack>

94. How many containers can be created from subnet range 172.17.0.1/16?
Ans: 2^32-16 - 2

95. How to install something into a running container without going inside?
Ans:
- docker exec <container_id> apt-get update && apt-get install -y ping

96. Get Ip address of a container?
Ans:
- docker inspect <container_id>

97. Talk to other container from another?
Ans: 
- docker exec <container_id> ping <ip_of_container_1>

98. Default networking of docker?
Ans: docker0
- ip a

99. Create our own networking?
Ans:
- docker network create sumitnet

100. Check network list?
Ans:
- docker network ls

101. Create container with own network?
Ans:
- docker run -d -P --network sumitnet tomcat

102. Change n/w of existing/running container?
Ans:
- docker network connect <new_network_name:sumitnet>

103. Drivers of network?
Ans:
- bridge - containers created using this will not share ip address from host system.
- host - containers will use host machines ip and networking i.e. can create only 1 container only
- null
- overlay - used for swarm

104. Create container with host driver?
Ans:
- docker run -d -P --net host nginx

Note: no ip address, mac address, port numbers
Whenever you create new container with host driver new container will stop immidiately after creation.

105. How swarm nodes talk to each other?
Ans: with the help of ingress network and docker gateway bridge

106. Create our own network for swarm?
Ans:
- docker nework create --driver overlay <name>

107. Remove network?
Ans:
- docker network rm <network_id>

108. Create service with new network?
Ans:
- docker service create --name <service_name> --network <network_name> --replicas 3 nginx

109. Docker security?
Ans: Docker, in itself, is quite secure because of its architecture and build. It also provies otjer options to make the system more robust. Following systems make the docker secure - 

- Namespaces and cgroups : first level of security provided by host kernel
- Linux kernel capabilties : From container one can not access host machine
- docker content trust - Enterprise edition feaures like image scanning
- docker daemon security - some certificates are used to make it secure

110. Logging?
Ans:
- local
- json-file (default)
- syslog
- splunk
- awslogs
- gcplogs
- jounald

111. How to define logging driver?
Ans: go to daemon.json and add

- vi daemon.json
 - i

{
  'log-driver': 'local',
  'log-opts': {
    'max-size': '5m'
  }
}

- esc and wq!

restart the service

- service docker restart

112. Backup of a manager?
Ans: 
Note: - Don't take a backup of a running container
      - Save it to separate container/vm
      - Run scripts on manager/leader only.

Take backup of /var/lib/docker

- stop docker service
- cd /var/lib/docker

- tar cvzf /tmp/swarm.tgz /var/lib/docker/swarm

113. Restore a backup
Ans:

stop the server first
- service docker stop

remove existing swarm folder
- rm -rf swarm

untar the backup file
got to folder where back up was taken

- tar -xvf swarm.tgz -C /var/lib/docker/swarm/

start the docker service
- service docker start

re Initialize swarm
- docker swarm init --force-new-cluster

114. Configure External DNS 
Ans:
- docker run --dns <server_address> <image_name> nslookup google.com

To configure the dns server for the entire system edit the daemon.json file and add the following:
{
  'dns':['<server_address>:8.8.8.8']
}
8.8.8.8 is the default google DNS server

After editing the daemon.jso restart the docker service

- service docker restart

115.